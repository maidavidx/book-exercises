# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("sandwich", "juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("banana", "oranges")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("ramen")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
?runif()
runif(10)
?aslist()
?as.list()
random_numb <= runif(10)
random_numb <- runif(10)
as.list(random_numb)
ran_num_list <- as.list(random_numb)
?lapply()
?round()
lapply(ran_num_list, round(), digits = 1)
?lapply()
lapply(ran_num_list, round())
lapply(ran_num_list, round(1))
lapply(ran_num_list, round(), 1)
?round()
lapply(ran_num_list, round(), ran_num_list, digits = 1)
?lapply()
lapply(ran_num_list, "round()", digits = 1)
lapply(ran_num_list, round, digits = 1)
rounded_nums <- lapply(ran_num_list, round, digits = 1)
?strsplit
chars <- strsplit(sentence, "")
sentence <- "animal crossing is really fun to play"
chars <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
vec_char <- chars$1:37
# Extract the vector of letters from the resulting list
vec_char <- chars$
# Extract the vector of letters from the resulting list
vec_char <- chars$
View(chars)
View(chars)
# Extract the vector of letters from the resulting list
vec_char <- chars$1
# Extract the vector of letters from the resulting list
vec_char <- chars[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique()
vec_char_unique <- unique(vec)
vec_char_unique <- unique(vec_char)
?filter
?filter
count <- count + 1
count_occurrences <- function(letter, v_letters) {
count <- 0
if (letter == v_letters) {
count <- count + 1
}
}
count_occurrences <- function(letter, v_letters) {
count <- 0
if (letter == v_letters) {
count <- count + 1
}
return(count)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence)
count_occurrences <- function(letter, v_letters) {
matches <- c(letter == v_letters)
count <- length(matches)
return(count)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
?sapply
sapply(sentence, count_occurrences, vec)
sapply(sentence, count_occurrences, vec_char_unique)
results <- sapply(sentence, count_occurrences, vec_char_unique)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars)
results <- sapply(sentence, count_occurrences, vec_char_unique)
results <- sapply(chars, count_occurrences, vec_char_unique)
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
count_occurrences("e", chars)
count_occurrences("e", chars)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("a", chars)
count_occurrences <- function(letter, v_letters) {
matches <- c(v_letters[letter == v_letters])
count <- length(matches)
return(count)
}
count_occurrences("a", chars)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars)
matches <- v_letters[letter == v_letters]
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
?runif()
random_numb <- runif(10)
ran_num_list <- as.list(random_numb)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
?lapply()
?round()
rounded_nums <- lapply(ran_num_list, round, digits = 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "animal crossing is really fun to play"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
?strsplit
chars <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
vec_char <- chars[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique()
vec_char_unique <- unique(vec_char)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
?filter
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
?sapply
results <- sapply(chars, count_occurrences, vec_char_unique)
# Print the resulting list of frequencies
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars)
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
count_occurrences("e", chars)
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(matches)
}
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
count_occurrences("e", chars)
View(chars)
chars <- c(strsplit(sentence, ""))
chars <- chars[1]
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
count_occurrences("e", chars)
chars_list <- chars[1]
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars_list)
results <- as.list(sapply(chars, count_occurrences, vec_char_unique))
chars_list <- chars[[1]]
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
?runif()
random_numb <- runif(10)
ran_num_list <- as.list(random_numb)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
?lapply()
?round()
rounded_nums <- lapply(ran_num_list, round, digits = 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "animal crossing is really fun to play"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
?strsplit
chars <- strsplit(sentence, "")
chars_list <- chars[[1]]
# Extract the vector of letters from the resulting list
vec_char <- chars[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique()
vec_char_unique <- unique(vec_char)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
?filter
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars_list)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
?sapply
results <- as.list(sapply(chars, count_occurrences, vec_char_unique))
# Print the resulting list of frequencies
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars_list)
results <- as.list(sapply(chars, count_occurrences, vec_char_unique))
results <- as.list(sapply(chars_list, count_occurrences, vec_char_unique))
# Print the resulting list of frequencies
print(results)
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
?runif()
random_numb <- runif(10)
ran_num_list <- as.list(random_numb)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
?lapply()
?round()
rounded_nums <- lapply(ran_num_list, round, digits = 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "animal crossing is really fun to play"
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
?strsplit
chars <- strsplit(sentence, "")
chars_list <- chars[[1]]
# Extract the vector of letters from the resulting list
vec_char <- chars[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique()
vec_char_unique <- unique(vec_char)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
?filter
count_occurrences <- function(letter, v_letters) {
matches <- v_letters[letter == v_letters]
count <- length(matches)
return(count)
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", chars_list)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
?sapply
results <- as.list(sapply(chars_list, count_occurrences, vec_char_unique))
# Print the resulting list of frequencies
print(results)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("sandwich", "juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("banana", "oranges")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("ramen")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
