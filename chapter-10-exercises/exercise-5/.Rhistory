# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(21, 28. 27, 27)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(21, 28, 27, 27)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points_scored <- c(21, 28, 27, 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(20, 26, 33, 10)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points_scored, points_allowed)
View(games)
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$points_scored - games$points_allowed
View(games)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
View(games)
View(games)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("Bengals", "Steelers", "Saints", "Cardinals")
# Assign your dataframe rownames of their opponents
games[["opponent", ]] <- opponent
View(games)
View(games)
# Assign your dataframe rownames of their opponents
row.names(games) <- opponent
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- (paste("Employee", c(1:100)))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
?runif
salaries <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries, adjustments, stringsAsFactors = FAlSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries2018 <- salaries$salaries + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustments > 0
# What was the 2018 salary of Employee 57
salaries_18 <- salaries$salaries2018
slaries_18[57]
salaries_18[57]
# How many employees got a raise?
nrow(salaries$raise)
# How many employees got a raise?
nrow(salaries$raise = TRUE)
View(salaries)
View(salaries)
# How many employees got a raise?
salaries$raise
# How many employees got a raise?
salaries$raise == TRUE
# How many employees got a raise?
nrow(salaries$raise == TRUE)
# How many employees got a raise?
nrow(salaries$raise,)
# How many employees got a raise?
nrow(salaries$raise, )
# How many employees got a raise?
salaries$raise,
# How many employees got a raise?
salaries[salaries$raise, ]
# How many employees got a raise?
nrow(salaries[salaries$raise, ])
# What was the dollar value of the highest raise?
?max
# What was the dollar value of the highest raise?
?max.col
# What was the dollar value of the highest raise?
?max
max(salaries$adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$raise == 9775.955]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$raise == 9775.955, ]
View(salaries)
View(salaries)
# What was the "name" of the employee who received the highest raise?
salary_high <- salaries[salaries$raise == 9775.955, ]
View(salary_high)
View(salary_high)
# What was the "name" of the employee who received the highest raise?
salary_high <- salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the "name" of the employee who received the highest raise?
salary_high <- salaries[salaries$adjustments == max(salaries$adjustments), ]
salary_high$employee
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
?data
data("USPersonalExpenditure")
?USPersonalExpenditure
is.data.frame(USPersonalExpenditure)
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe_df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
column_namees <- colnames(uspe_df)
# What are the column names of your dataframe?
column_names <- colnames(uspe_df)
column_names
# What are the row names of your dataframe?
row_names <- rownames(uspe_df)
row_names
# Add a column "category" to your data frame that contains the rownames
uspe_df$category <- row_names
View(USPersonalExpenditure)
View(USPersonalExpenditure)
View(uspe_df)
View(uspe_df)
# How much money was spent on personal care in 1940?
uspe_1940 <- uspe_df[uspe_df$X1940, ]
View(uspe_1940)
View(uspe_1940)
# How much money was spent on personal care in 1940?
uspe_1940 <- uspe_df[uspe_df$category == "Personal Care", ]
View(uspe_1940)
View(uspe_1940)
uspe_1940[uspe_1940$X1940]
# How much money was spent on personal care in 1940?
uspe_pc <- uspe_df[uspe_df$category == "Personal Care", ]
uspe_pc[uspe_1940$X1940]
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
uspe_ft[uspe_ft$X1960]
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
uspe_ft[uspe_ft$X1960]
uspe_pc[uspe_pc$X1940]
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
uspe_ft[uspe_ft$X1960]
View(uspe_ft)
View(uspe_ft)
View(uspe_pc)
View(uspe_pc)
View(uspe_ft)
View(uspe_ft)
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
uspe_ft[uspe_ft$X1960]
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
?data
data("USPersonalExpenditure")
?USPersonalExpenditure
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe_df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
column_names <- colnames(uspe_df)
column_names
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
row_names <- rownames(uspe_df)
row_names
# Add a column "category" to your data frame that contains the rownames
uspe_df$category <- row_names
# How much money was spent on personal care in 1940?
uspe_pc <- uspe_df[uspe_df$category == "Personal Care", ]
uspe_pc[uspe_pc$X1940]
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
uspe_ft[uspe_ft$X1960]
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
uspe_ft[uspe_ft$1960]
uspe_ft[uspe_ft$1960]
uspe_ft[uspe_ftX1960]
uspe_ft[uspe_ft$X1960]
colnames(uspe_ft)
uspe_ft$X1960
uspe_pc$X1940
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
?data
data("USPersonalExpenditure")
?USPersonalExpenditure
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe_df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
column_names <- colnames(uspe_df)
column_names
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
row_names <- rownames(uspe_df)
row_names
# Add a column "category" to your data frame that contains the rownames
uspe_df$category <- row_names
# How much money was spent on personal care in 1940?
uspe_pc <- uspe_df[uspe_df$category == "Personal Care", ]
uspe_pc$X1940
# How much money was spent on Food and Tobacco in 1960?
uspe_ft <- uspe_df[uspe_df$category == "Food and Tobacco", ]
colnames(uspe_ft)
uspe_ft$X1960
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
?read.csv
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
?mean
mean_val <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
mean_val
largest_grant
# What was the dollar amount of the smallest grant?
?min
smallest_grant <- min(grants$total_amount)
smallest_grant
# Which organization received the largest grant?
lg_org <- organization[grants$total_amount == largest_grant]
lg_org
# Which organization received the smallest grant?
sg_org <- organization[grants$total_amount == smallest_grant]
sg_
sg_org
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
View(names)
names_2013 <- names[names$year == 2013, ]
View(names_2013)
# What was the most popular female name in 2013?
pop_female_name <- names_2013[names_2013$prop == max(names_2013$prop), ]
pop_female_name
# What was the most popular female name in 2013?
pop_female_name <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
pop_female_name
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_year <- names[names$year == year]
pop <- names_year[names_year$prop == max(names_year$prop), "name"]
return(pop)
}
# What was the most popular female name in 1994?
pop_1994 <- most_popular_in_year(1994)
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_year <- names[names$year == year, ]
pop <- names_year[names_year$prop == max(names_year$prop), "name"]
return(pop)
}
# What was the most popular female name in 1994?
pop_1994 <- most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
name_percent <- names[names$year == year & names$name == name, "prop"]
return(name_percent)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("David", 1999)
