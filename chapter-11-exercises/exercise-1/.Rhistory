# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
is.data.frame(vehicles)
makes <- vehicles[[make]]
makes <- vehicles[[make, ]]
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
?unique
unique(makes)
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
View(vehicles_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
?order
vehicle[order(vehicle$hwy)]
vehicles[order(vehicles$hwy)]
vehicles[order(vehicles$hwy), ]
View(vehicles[order(vehicles$hwy), ])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
?average
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
?avg
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
?mean
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) / 2
View(vehicles_1997)
View(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "Front-Wheel Drive" & vehicles$drive == "Rear-Wheel Drive" & vehicles$cty > 20]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "Front-Wheel Drive" & vehicles$drive == "Rear-Wheel Drive" & vehicles$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[(vehicles$drive == "Front-Wheel Drive" | vehicles$drive == "Rear-Wheel Drive") & vehicles$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2wd <- vehicles[(vehicles$drive == "Front-Wheel Drive" | vehicles$drive == "Rear-Wheel Drive") & vehicles$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- vehicles[(vehicles$drive == "Front-Wheel Drive" | vehicles$drive == "Rear-Wheel Drive") & vehicles$cty > 20, ]
View(two_wheel_drive)
View(two_wheel_drive)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), "id"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_eff <- function(year_choice, make_choice) {
make_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice]
model <- make_year[make_year$hwy == max(make_year$hwy), "model"]
return(model)
}
# What was the most efficient Honda model of 1995?
most_hwy_eff(1995, "Honda")
make_year <- vehicles[vehicles$year == 1995 && vehicles$make == "Honda"]
View(make_year)
View(make_year)
make_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice, ]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_eff <- function(year_choice, make_choice) {
make_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice, ]
model <- make_year[make_year$hwy == max(make_year$hwy), "model"]
return(model)
}
# What was the most efficient Honda model of 1995?
most_hwy_eff(1995, "Honda")
make_year <- vehicles[vehicles$year == 1995 && vehicles$make == "Honda", ]
View(make_year)
View(make_year)
View(make_year)
View(make_year)
make_year <- vehicles[vehicles$year == 1995 & vehicles$make == "Honda", ]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_eff <- function(year_choice, make_choice) {
make_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
model <- make_year[make_year$hwy == max(make_year$hwy), "model"]
return(model)
}
# What was the most efficient Honda model of 1995?
most_hwy_eff(1995, "Honda")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
is.data.frame(vehicles)
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
?unique
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
View(vehicles_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
?order
vehicles[order(vehicles$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
?mean
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- vehicles[(vehicles$drive == "Front-Wheel Drive" | vehicles$drive == "Rear-Wheel Drive") & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_drive[two_wheel_drive$hwy == min(two_wheel_drive$hwy), "id"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_eff <- function(year_choice, make_choice) {
make_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
model <- make_year[make_year$hwy == max(make_year$hwy), "model"]
return(model)
}
# What was the most efficient Honda model of 1995?
most_hwy_eff(1995, "Honda")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
install.packages("dplyr")
# Install and load the "dplyr" library
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
?select
# Selecting data is done with "select()"
?select
makes <- select(vehicles, make)
makes <- select(vehicles, make)
View(makes)
View(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
?distinct
# Filtering out only unique data, done with "distinct()"
?distinct
distinct(makes)
distinct(vehincles, makes)
distinct(vehicles, makes)
distinct(vehicles, make)
View(distinct(vehicles, make))
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
?filter
# Use filter() to choose rows/cases where conditions are true.
# Unlike base subsetting with [, rows where the condition evaluates to NA are dropped.
?filter
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
?arrange
# Order tbl rows by an expression involving its variables.
?arrange
View(vehicles)
drives <- select(vehicles, drive)
View(distinct(drives))
arrange(vehicles_1997, hwy)
vehicles_1997 <- filter(vehicles, year == 1997)
arrange(vehicles_1997, hwy)
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
?mutate
# mutate() adds new variables and preserves existing ones;
# transmute() adds new variables and drops existing ones. Both functions preserve the
# number of rows of the input. New variables overwrite existing variables of the same name.
?mutate
?tranmute
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles_1997, drive = "2-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles_1997, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
?filter
?select
worst <- filter(vehicles_1997, hwy == min(hwy))
worst_vehicle <- select(worst, id)
worst_vehicle
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
best_car <- select(filter(year_and_make, hwy = max(hwy)), make)
return(best_car)
}
# What was the most efficient Honda model of 1995?
best_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
best_car <- select(filter(year_and_make, hwy == max(hwy)), make)
return(best_car)
}
# What was the most efficient Honda model of 1995?
best_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice) {
year_and_make <- filter(vehicles, year == year_choice, make == make_choice)
best_car <- select(filter(year_and_make, hwy == max(hwy)), model)
return(best_car)
}
# What was the most efficient Honda model of 1995?
best_car(1995, "Honda")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
remove.packages("fueleconomy")
install.packages('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
?%>%
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura_2015 <- filter(vehicles, make == "Acura", year == 2015)
best_hwy <- filter(acura_2015, hwy == max(hwy))
best_acura <- select(best_hwy, model)
best_acura
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_acura <- select(filter(filter(vehicles, make == "Acura", year == 2015), hwy == max(hwy)), model)
best_acura
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_acura <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
best_acura
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
?mutate
View(flights)
??flights
flights <- mutate(flights, delta_time = arr_delay - dep_time)
# Order tbl rows by an expression involving its variables.
?arrange
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- desc(flights, delta_time, )
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- desc(flights, delta_time)
flights <- mutate(flights, delta_time = arr_delay - dep_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- desc(flights, delta_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(delta_time))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, delta_time = arr_delay - dep_time) %>%
arrage(desc(delta_time))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, delta_time = arr_delay - dep_time) %>%
arrange(desc(delta_time))
flights <- flights %>% mutate(delta_time = arr_delay - dep_time) %>%
arrange(desc(delta_time)))
flights <- flights %>% mutate(delta_time = arr_delay - dep_time) %>%
arrange(desc(delta_time))
# Make a histogram of the amount of time gained using the `hist()` function
?hist
hist(flights$delat_time)
hist(flights$delta_time)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
?mean
mean(flights$delta_time, na.rm = TRUE)
flights <- mutate(flights, delta_time = arr_delay - dep_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, delta_time = arr_delay - dep_delay) %>%
arrange(desc(delta_time))
flights <- flights %>% mutate(delta_time = arr_delay - dep_delay) %>%
arrange(desc(delta_time))
hist(flights$delta_time)
mean(flights$delta_time, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>% select(origin, dest, delta_air) %>% filter(dest == SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>% select(origin, dest, delta_time) %>% filter(dest == SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- flights %>% select(origin, dest, delta_time) %>% filter(dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(to_sea$delta_time, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
?summarize
filter(flights, origin == "JFK", dest == "SEA") %>% summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE)
)
test <- filter(flights, origin == "JFK", dest == "SEA") %>% summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE)
)
View(test)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
?group_by
View(flights)
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(
avg_depart_time <- mean(dep_time, na.rm = TRUE)
)
View(dep_delay_by_month)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(
avg_depart_time <- mean(dep_delay, na.rm = TRUE)
)
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(
avg_delay_time <- mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, max(avg_delay_time))
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(
avg_delay_time <- mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, max(avg_delay_time))
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(
avg_delay_time = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, max(avg_delay_time))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, avg_delay_time = max(avg_delay_time)) %>% select(month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, avg_delay_time == max(avg_delay_time)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
?heaed
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
?head
high_delays <- flights %>% group_by(dest) %>% summarize (
avg_arr_delays = mean(arr_delay, na.rm = TRUE)
) %>% arrange(desc(avg_arr_delays)) %>% head()
head(high_delays)
high_delays <- flights %>% group_by(dest) %>% summarize (
avg_arr_delays = mean(arr_delay, na.rm = TRUE)
) %>% arrange(desc(avg_arr_delays))
head(high_delays)
# You can look up these airports in the `airports` data frame!
View(airports)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
?left_join
??airports
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
?left_join
largest_avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize (avg_arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left.join(airports, by = "faa") %>%
filter(avg_arr_delays == max(avg_))
largest_avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize (avg_arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left.join(airports, by = "faa") %>%
filter(avg_arr_delays == max(avg_arr_delays))
largest_avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize (avg_arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_arr_delays == max(avg_arr_delays))
largest_avg_arr_delay
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
largest_avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize (avg_arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_arr_delays == max(avg_arr_delays))
largest_avg_arr_delay
largest_avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize (avg_arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_arr_delays == max(avg_arr_delays, na.rm = TRUE))
largest_avg_arr_delay
smallest_avg_arr_delay <- flights %>%
group_by(carrier) %>%
summarise(avg_arr_delays = mean(arr_delay, na.rm =TRUE)) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_arr_delays == max(avg_arr_delays, na.rm = TRUE))
smallest_avg_arr_delay
