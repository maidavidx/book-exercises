hello_string <- "Hello World!"
print(hello_string)
6 * 9
6 * 9
#numeric type variable
num_peaches <- 15
num_apple <- 10
num_peaches <- num_peaches + 5
price_peaches <- 100
num_bells <- 20
num_peaches * price_peaches
#text
my_name <- "David"
price_red_couch <- 3000
num_bells <- num_peaches * price_peaches + num_bells
price_apples <- 500
num_bells <- num_apple * price_apples + num_bells
#boolean
price_red_couch < num_bells
num_bells <- num_bells - price_red_couch
tolower("QUIET IN THE LIBRARY")
min(price_peaches, price_apples)
min(price_peaches, price_apples)
#SETS
peach_inv <- c(10, 10, 5)
max(peach_inv)
install.packages("string")
install.packages("stringr")
library(stringr)
str_trim("        remove spaces before and after text")
hometown -> "tacoma"
my_name -> "David"
my_height -> 70
my_height <- 70
my_name <- "David"
hometown <- "tacoma"
puppies <- 3
puppy_price <- 400
total_cost <- puppies * puppy_price
too_expensive <- total_cost > 1000
max_puppies <- 2
lyric <- "I like to each apples and bananas"
max_puppies <- %1000 / total_cost%
max_puppies <- 1000 %/ total_cost%
max_puppies <- 1000 %/ total_cost%
intro <- substr(lyric, 1, 13)
lyric <- "I like to each apples and bananas"
intro <- substr(lyric, 1, 13)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "tacoma"
# Assign your name to the variable `my_name`
my_name <- "David"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 400
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/ total_cost%
max_puppies <- 1000 %/% total_cost
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "tacoma"
# Assign your name to the variable `my_name`
my_name <- "David"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 400
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
max_puppies <- 1000 %/ total_cost%
max_puppies <- 1000 %/ total_cost %
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "tacoma"
# Assign your name to the variable `my_name`
my_name <- "David"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 400
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/ total_cost %
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "tacoma"
# Assign your name to the variable `my_name`
my_name <- "David"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 400
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% total_cost
max_puppies <- 1000 %/% puppt_price
max_puppies <- 1000 %/% puppy_price
length <- nchar(lyric)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to each apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits <- substr(lyric, 15, 33)
?gsub
fruits_e <- gsub(a, ee, fruits)
fruits_e <- gsub('a', 'ee', fruits)
fruits_e <- gsub("a", "ee", fruits)
fruits_a <- gsub("a", "o", fruits)
?paste
lyric_e <- paste(intro =, fruits_e)
lyric_e <- paste(intro, fruits_e)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
fruits <- substr(lyric, 15, 33)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_a <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
?paste
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits_o <- gsub("a", "o", fruits)
print(paste(intro, fruits_o))
print(intro + fruits_o)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
fruits <- substr(lyric, 15, 33)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
?paste
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
fruits <- substr(lyric, 15, 33)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
?paste
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
add_three <- function(value) {
add_three_sum <- value + 3
add_three_sum
}
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
inches_sum = (feet * 12) + inches
meters = inches_sum / 39.37
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
inches_sum <- (feet * 12) + inches
meters <- inches_sum / 39.37
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value) {
add_three_sum <- value + 3
add_three_sum
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
inches_sum <- (feet * 12) + inches
meters <- inches_sum / 39.37
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
#with spaces in between
paste("I", "hope", "you", "are" "staying", "hydrated")
#with no spaces
paste0("I", "hope", "you", "are" "staying", "hydrated")
#with spaces in between
paste("I", "hope", "you", "are", "staying", "hydrated")
#with no spaces
paste0("I", "hope", "you", "are", "staying", "hydrated")
contradict <- function(statement) {
result <- paste0(statement, ", Thomas said incorrectly")
return(result)
}
install.packages("styler")
library(styler)
install.packages("lintr")
library(lintr)
?nchar
is_twice_as_long <- function(str1, str2) {
str1_length <- nchar(str1)
str2_length <- nchar(str2)
str_length_diff <- abs(str1_length - str2_length)
if (str1_length > str2_length) {
return (str_length_diff >= str2_length)
} else {
return (str_length_diff >= str1_length)
}
}
setwd("~/Desktop/book-exercises/chapter-06-exercises/exercise-4")
is_twice_as_long("hope", "cool")
is_twice_as_long("hope", "hopefully")
is_twice_as_long("informatic", "david")
describe_difference <- funtion(str1, str2) {
if (nchar(str1) > nchar(str2)) {
str_length_diff <- nchar(str1) - nchar(str2)
return(paste("Your first string is longer by", str_length_diff, "characters"))
} else if (nchar(str2) > nchar(str1)) {
str_length_diff <- nchar(str2) - nchar(str1)
return(paste("Your second string is longer by", str_length_diff, "characters"))
} else {
return(paste("Your strings are the same length"))
}
}
describe_difference <- funtion(str1, str2) {
if (nchar(str1) > nchar(str2)) {
str_length_diff <- nchar(str1) - nchar(str2)
return(paste("Your first string is longer by", str_length_diff, "characters"))
} else if (nchar(str2) > nchar(str1)) {
str_length_diff <- nchar(str2) - nchar(str1)
return(paste("Your second string is longer by", str_length_diff, "characters"))
} else {
return(paste("Your strings are the same length"))
}
}
describe_difference <- function(str1, str2) {
if (nchar(str1) > nchar(str2)) {
str_length_diff <- nchar(str1) - nchar(str2)
return(paste("Your first string is longer by", str_length_diff, "characters"))
} else if (nchar(str2) > nchar(str1)) {
str_length_diff <- nchar(str2) - nchar(str1)
return(paste("Your second string is longer by", str_length_diff, "characters"))
} else {
return(paste("Your strings are the same length"))
}
}
describe_difference("shoe", "hot")
describe_difference("cool", "frozen")
describe_difference("cot", "koi")
return(paste("Your strings are the same length!"))
library(lintr)
setwd("~/Desktop/book-exercises/chapter-06-exercises/exercise-4")
library(lintr)
lint("exercise.R")
lint("exercise.R")
lint("exercise.R")
